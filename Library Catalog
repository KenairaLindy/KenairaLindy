// This is a "Simple Library Catalog." - where you can store and manage different types of library items.

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// Generic LibraryItem class
class LibraryItem<T> {
    private String title;
    private String author;
    private String itemID;
    private T itemDetails; // Can hold any additional details specific to the item type

    public LibraryItem(String title, String author, String itemID, T itemDetails) {
        this.title = title;
        this.author = author;
        this.itemID = itemID;
        this.itemDetails = itemDetails;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public String getItemID() {
        return itemID;
    }

    public T getItemDetails() {
        return itemDetails;
    }

    @Override
    public String toString() {
        return "Title: " + title + ", Author: " + author + ", Item ID: " + itemID + ", Details: " + itemDetails;
    }
}

// Generic Catalog class
class GenericCatalog<T> {
    private List<LibraryItem<T>> items;

    public GenericCatalog() {
        items = new ArrayList<>();
    }

    public void addItem(LibraryItem<T> item) {
        items.add(item);
        System.out.println("Item added: " + item);
    }

    public void removeItem(String itemID) {
        for (LibraryItem<T> item : items) {
            if (item.getItemID().equals(itemID)) {
                items.remove(item);
                System.out.println("Item removed: " + item);
                return;
            }
        }
        System.out.println("Error: Item with ID " + itemID + " does not exist.");
    }

    public void viewCatalog() {
        if (items.isEmpty()) {
            System.out.println("Catalog is empty.");
        } else {
            System.out.println("Current Catalog:");
            for (LibraryItem<T> item : items) {
                System.out.println(item);
            }
        }
    }
}

// Main class for command-line interface
public class LibraryCatalogApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        GenericCatalog<String> catalog = new GenericCatalog<>();

        while (true) {
            System.out.println("\nLibrary Catalog Menu:");
            System.out.println("1. Add new item");
            System.out.println("2. Remove an item");
            System.out.println("3. View catalog");
            System.out.println("4. Exit");
            System.out.print("Select an option: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter title: ");
                    String title = scanner.nextLine();
                    System.out.print("Enter author: ");
                    String author = scanner.nextLine();
                    System.out.print("Enter item ID: ");
                    String itemID = scanner.nextLine();
                    System.out.print("Enter item details: ");
                    String itemDetails = scanner.nextLine();

                    LibraryItem<String> newItem = new LibraryItem<>(title, author, itemID, itemDetails);
                    catalog.addItem(newItem);
                    break;

                case 2:
                    System.out.print("Enter item ID to remove: ");
                    String removeID = scanner.nextLine();
                    catalog.removeItem(removeID);
                    break;

                case 3:
                    catalog.viewCatalog();
                    break;

                case 4:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;

                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }
}





